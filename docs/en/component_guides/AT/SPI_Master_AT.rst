.. _SPIM:

SPI Master Command Set
===========================

Introduction
--------------------

SPI (Serial Peripheral Interface) is a common serial communication protocol used primarily for data transmission between microcontrollers and various peripheral devices. It is a full-duplex communication method that allows data to be transmitted simultaneously in both directions. Before starting AT commands, ensure that the SPI master and SPI slave are properly connected.

Function List
------------------

    1. :ref:`AT+DRVSPIMCONFGPIO <cmd-DRVSPIMCONFGPIO>`: Configure SPI GPIO
    2. :ref:`AT+DRVSPIMINIT <cmd-DRVSPIMINIT>`: Initialize SPI Master driver
    3. :ref:`AT+DRVSPIMRD <cmd-DRVSPIMRD>`: Read SPI data
    4. :ref:`AT+DRVSPIMWR <cmd-DRVSPIMWR>`: Write SPI data

Function Overview
----------------------------
.. only:: w800s

   The W800 implements synchronous SPI master-slave functionality. Its working clock is the internal system bus clock. The master supports four Motorola SPI formats (CPOL, CPHA), TI timing, and macrowire timing. The send and receive lengths are unlimited, with a maximum clock support of 20MHz.


   The W800 has three groups of 12 GPIO pins that can be used for SPI, with CS fixedly controlled by software. Any idle GPIO pin can be used as CS, and GPIO20 is used by default. The relationship of SPI pins is shown in the following table:

   .. list-table::
      :widths: 25 25 25 25 25
      :header-rows: 0
      :align: center

      * - SPI Function
        - Pin Number
        - Pin Name
        - Pin Multiplexing Function
        - Pin Attributes

      * - MOSI0
        - PIN_NUM_7
        - PA7
        - OPT2
        - output

      * - MOSI1
        - PIN_NUM_21
        - PB5
        - OPT1
        - output

      * - MOSI2
        - PIN_NUM_33
        - PB17
        - OPT1
        - output

      * - MOSI3
        - PIN_NUM_42
        - PB26
        - OPT1
        - output

      * - MISO0
        - PIN_NUM_16
        - PB0
        - OPT2
        - float/input

      * - MISO1
        - PIN_NUM_19
        - PB3
        - OPT2
        - float/input

      * - MISO2
        - PIN_NUM_32
        - PB16
        - OPT3
        - float/input

      * - MISO3
        - PIN_NUM_41
        - PB125
        - OPT1
        - float/input

      * - SCK0
        - PIN_NUM_17
        - PB1
        - OPT2
        - output

      * - SCK1
        - PIN_NUM_18
        - PB2
        - OPT2
        - output

      * - SCK2
        - PIN_NUM_31
        - PB15
        - OPT3
        - output

      * - SCK3
        - PIN_NUM_40
        - PB24
        - OPT1
        - output

      * - CS0
        - PIN_NUM_0
        - PA0
        - OPT5
        - output

      * - CS1
        - PIN_NUM_20
        - PB4
        - OPT5
        - output

      * - CS2
        - PIN_NUM_30
        - PB14
        - OPT5
        - output

      * - CS3
        - PIN_NUM_39
        - PB23
        - OPT5
        - output

.. note::
    It needs to be called after SPIM initialization, otherwise the configurations of CLOCK, MISO, and MOSI will be overwritten by the default values during the SPIM initialization process.
.. _cmd-DRVSPIMCONFGPIO:

:ref:`AT+DRVSPIMCONFGPIO <cmd-DRVSPIMCONFGPIO>`: Configure SPI GPIO
-----------------------------------------------------------------------

Set Command
^^^^^^^^^^^^^^

**Command:**

::

    AT+DRVSPIMCONFGPIO=<mosi>,<miso>,<sclk>,<cs>

**Response:**

::

    OK

Parameters
^^^^^^^^^^^^

-  **<mosi>**: Data line from master to slave
-  **<miso>**: Data line from slave to master
-  **<sclk>**: Clock signal line generated by the master
-  **<cs>**: Used to select a specific slave device


Example
^^^^^^^^^^^

::

    AT+DRVSPIMCONFGPIO=7,16,17,0 //Configure mosi: GPIO7, miso: GPIO16, sclk: GPIO17, cs: GPIO0

.. _cmd-DRVSPIMINIT:

:ref:`AT+DRVSPIMINIT <cmd-DRVSPIMINIT>`: Initialize SPI Master driver
-------------------------------------------------------------------------------------------

Set Command
^^^^^^^^^^^^^^^

**Command:**

::

    AT+DRVSPIMINIT=<clock>,<mode>

**Response:**

::

    OK

Parameters
^^^^^^^^^^^^

-  **<clock>**: Clock speed, currently supports 10KHz~20MHz
-  **<mode>**: SPI mode, range: 0 ~ 3

Description
^^^^^^^^^^^^^

-  The SPI GPIO needs to be configured before SPI initialization.

Example
^^^^^^^^^^^

::

    AT+DRVSPIMINIT=2,0  //Set SPI mode to 0, 2MHz clock


.. _cmd-DRVSPIMRD:

:ref:`AT+DRVSPIMRD <cmd-DRVSPIMRD>`: Read SPI data
-------------------------------------------------------------------------------------------

Set Command
^^^^^^^^^^^^^^^

**Command:**

::

    AT+DRVSPIMRD=<data_len>

**Response:**

::

    OK

Parameters
^^^^^^^^^^^^

-  **<data_len>**: Length of data to read


Example
^^^^^^^^^^^

::

    AT+DRVSPIRD=10  // Read 10 bytes of data



.. _cmd-DRVSPIMWR:

:ref:`AT+DRVSPIMWR <cmd-DRVSPIMWR>`: Write SPI data
-------------------------------------------------------------------------------------------

Set Command
^^^^^^^^^^^^^^^

**Command:**

::

    AT+DRVSPIMWR=<data_len>

**Response:**

::

    OK

Parameter
^^^^^^^^^^^^

-  **<data_len>**: Length of data to write


Example
^^^^^^^^^^^

::

    AT+DRVSPIMWR=10  // Write 10 bytes of data

