menu "FreeRTOS"

    config FREERTOS_HZ
        int "Tick rate (Hz)"
        range 100 1000
        default 1000
        help
            Select the tick rate at which FreeRTOS does pre-emptive context switching.

    config FREERTOS_IDLE_TASK_STACKSIZE
        int "Idle Task stack size (Word)"
        range 64 8192
        default 256
        help
            The idle task has its own stack, sized in word. The default size is enough for most uses.

            The stack size may need to be increased above the default if the app installs idle or thread local storage
            cleanup hooks that use a lot of stack memory.

    config FREERTOS_MAX_TASK_NAME_LEN
        int "Maximum task name length (Byte)"
        range 1 32
        default 16
        help
            Changes the maximum task name length. Each task allocated will
            include this many bytes for a task name. Using a shorter value
            saves a small amount of RAM, a longer value allows more complex
            names.

    menuconfig FREERTOS_USE_TRACE_FACILITY
        bool "Enable FreeRTOS trace facility"
        default y
        help
            If enabled, configUSE_TRACE_FACILITY will be defined as 1 in FreeRTOS.
            This will allow the usage of trace facility functions such as
            uxTaskGetSystemState().

    menuconfig FREERTOS_USE_STATS_FORMATTING_FUNCTIONS
        bool "Enable FreeRTOS stats formatting functions"
        depends on FREERTOS_USE_TRACE_FACILITY
        default y
        help
            If enabled, configUSE_STATS_FORMATTING_FUNCTIONS will be defined as 1 in
            FreeRTOS. This will allow the usage of stats formatting functions such
            as vTaskList().

    config FREERTOS_ENABLE_RUN_TIME_STATS
        bool "Enable FreeRTOS Run Time Stats"
        depends on FREERTOS_USE_STATS_FORMATTING_FUNCTIONS
        default n
        help
            If enabled, thread runtime will be counted.

        config FREERTOS_USE_TICKLESS_IDLE
            bool "Enable FreeRTOS tickless"
            default n
            help
                If power management support is enabled, FreeRTOS will be able to put the system into light sleep mode
                when no tasks need to run for a number of ticks. This number can be set using
                FREERTOS_IDLE_TIME_BEFORE_SLEEP option.

        config FREERTOS_IDLE_TIME_BEFORE_SLEEP
            int "FreeRTOS tickless idle time"
            depends on FREERTOS_USE_TICKLESS_IDLE
            default 3
            range 2 4294967295
            # Minimal value is 2 because of a check in FreeRTOS.h (search configEXPECTED_IDLE_TIME_BEFORE_SLEEP)
            help
                FreeRTOS will enter light sleep mode if no tasks need to run for this number of ticks.

    config FREERTOS_ENABLE_IDLE_HOOK
        bool "Enable FreeRTOS idle hook"
        default y
        help
            FreeRTOS can called vApplicationIdleHook when idle task execution.

    config FREERTOS_ENABLE_TICK_HOOK
        bool "Enable FreeRTOS tick hook"
        default n
        help
            FreeRTOS can called vApplicationTickHook.

    config FREERTOS_QUEUE_REGISTRY_SIZE
            int "FreeRTOS queue registry size (Number of items)"
            range 0 20
            default 0
            help
                FreeRTOS uses the queue registry as a means for kernel aware debuggers to locate queues, semaphores,
                and mutexes. The registry allows for a textual name to be associated with a queue for easy identification
                within a debugging GUI. A value of 0 will disable queue registry functionality, and a value larger than 0
                will specify the number of queues/semaphores/mutexes that the registry can hold.

    config FREERTOS_TIMER_TASK_PRIORITY
        int "FreeRTOS timer task priority"
        range 1 15
        default 15
        help
            The timer service task (primarily) makes use of existing FreeRTOS features, allowing timer
            functionality to be added to an application with minimal impact on the size of the application's
            executable binary.

            Use this constant to define the priority that the timer task will run at.

    config FREERTOS_TIMER_TASK_STACK_DEPTH
        int "FreeRTOS timer task stack size (Word)"
        range 128 8192
        default 512
        help
            The timer service task (primarily) makes use of existing FreeRTOS features, allowing timer
            functionality to be added to an application with minimal impact on the size of the application's
            executable binary.

            Use this constant to define the size (in bytes) of the stack allocated for the timer task.

    config FREERTOS_TIMER_QUEUE_LENGTH
        int "FreeRTOS timer queue length (Number of items)"
        range 64 256
        default 128
        help
            FreeRTOS provides a set of timer related API functions. Many of these functions use a standard
            FreeRTOS queue to send commands to the timer service task. The queue used for this purpose is
            called the 'timer command queue'. The 'timer command queue' is private to the FreeRTOS timer
            implementation, and cannot be accessed directly.

            For most uses the default value of 10 is OK.

    config FREERTOS_ENABLE_STATIC_TASK_CLEAN_UP
        bool "Enable static task clean up hook"
        default y
        help
            Enable this option to make FreeRTOS call the static task clean up hook when a task is deleted.

    choice FREERTOS_ASSERT
        prompt "FreeRTOS assertions"
        default FREERTOS_ASSERT_FAIL_ABORT
        help
            Failed FreeRTOS configASSERT() assertions can be configured to
            behave in different ways.

            By default these behave the same as the global project assert settings.

        config FREERTOS_ASSERT_DISABLE
            bool "Disable"
            help
                FreeRTOS configASSERT() will not be compiled into the binary.

        config FREERTOS_ASSERT_FAIL_ABORT
            bool "Abort"
            help
                If a FreeRTOS configASSERT() fails, FreeRTOS will abort and
                halt execution.

        config FREERTOS_ASSERT_FAIL_PRINT_CONTINUE
            bool "Print and continue"
            help
                If a FreeRTOS assertion fails, print it out and continue.

    endchoice

    config FREERTOS_CHECK_STACKOVERFLOW
        bool "Check for stack overflow"
        default y
        help
            FreeRTOS can check for stack overflows in threads
            called vApplicationStackOverflowHook when this happens.

endmenu
