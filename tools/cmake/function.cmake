function(get_python python version path)
    set(res 1)
    execute_process(COMMAND python3 --version RESULT_VARIABLE cmd_res OUTPUT_VARIABLE cmd_out ERROR_VARIABLE cmd_out)
    if(${cmd_res} EQUAL 0)
        set(${python} python3 PARENT_SCOPE)
        string(STRIP "${cmd_out}" cmd_out)
        set(${version} ${cmd_out} PARENT_SCOPE)
        if(CMAKE_HOST_WIN32)
            find_path(python_path NAMES "python3.exe")
        else()
            find_path(python_path NAMES "python3")
        endif()
        set(${path} ${python_path} PARENT_SCOPE)
    else()
        execute_process(COMMAND python --version RESULT_VARIABLE cmd_res OUTPUT_VARIABLE cmd_out ERROR_VARIABLE cmd_out)
        if(${cmd_res} EQUAL 0)
            set(${python} python PARENT_SCOPE)
            string(STRIP "${cmd_out}" cmd_out)
            set(${version} ${cmd_out} PARENT_SCOPE)
            if(CMAKE_HOST_WIN32)
                find_path(python_path NAMES "python.exe")
            else()
                find_path(python_path NAMES "python") #PATHS "$ENV{PATH}"
            endif()
            set(${path} ${python_path} PARENT_SCOPE)
        endif()
    endif()
endfunction(get_python python)

# add prefix for all list members
# uage: prepend(out_var prefix in_var)
function(prepend out prefix)
    set(listVar "")
    foreach(f ${ARGN})
        list(APPEND listVar "${prefix}${f}")
    endforeach(f)
    set(${out} "${listVar}" PARENT_SCOPE)
endfunction()

# convert all members of list to absolute path(relative to CMAKE_CURRENT_SOURCE_DIR)
# usage: abspath(out_var list_var)
function(abspath out)
    set(listVar "")
    foreach(f ${ARGN})
        list(APPEND listVar "${CMAKE_CURRENT_SOURCE_DIR}/${f}")
    endforeach(f)
    set(${out} "${listVar}" PARENT_SCOPE)
endfunction()

function(append_srcs_dir out_var)
    set(listVar ${${out_var}})
    foreach(f ${ARGN})
        aux_source_directory(${f} tmp)
        list(APPEND listVar ${tmp})
    endforeach(f)
    set(${out_var} "${listVar}" PARENT_SCOPE)
endfunction()

function(bin2c_file bfile_path cfile_path cfile_name is_text)
    execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${cfile_path} RESULT_VARIABLE cmd_res)
    if(NOT cmd_res EQUAL 0)
        message(FATAL_ERROR "make '${cfile_path}' dir error")
    endif()

    execute_process(COMMAND ${python} ${SDK_PATH}/tools/wm/bin2c.py ${bfile_path} "${cfile_path}/${cfile_name}" ${is_text} RESULT_VARIABLE cmd_res)
    if(NOT cmd_res EQUAL 0)
        message(FATAL_ERROR "generate '${bfile_path}' to '${cfile_name}' error")
    endif()
endfunction()

function(register_component)
    get_filename_component(component_dir ${CMAKE_CURRENT_LIST_FILE} DIRECTORY)
    if(ARGC)
        set(component_name ${ARGV0})
    else()
        get_filename_component(component_name ${component_dir} NAME)
    endif()
    if(USE_CMAKE_BUILD_DEBUG)
        message(STATUS "Register component: ${component_name}, path: ${component_dir}")
        set(_reg_use_component ${component_name})
        list(APPEND _reg_use_component ${reg_use_components})
        set(reg_use_components ${_reg_use_component} CACHE INTERNAL "")
    endif()

    #add embedded binary files
    foreach(embed_bin_file ${ADD_EMBEDDED_FILES})
        get_filename_component(embed_bin_name ${embed_bin_file} NAME)
        get_filename_component(embed_bin_dir ${embed_bin_file} DIRECTORY)
        get_filename_component(embed_bin_file_name ${embed_bin_file} ABSOLUTE)
        string(REPLACE "/" ";" embed_bin_dir2 ${embed_bin_dir})
        set(embed_bin_c_file_name "__binary_${component_name}")
        set(embed_bin_c_file_path "${PROJECT_BINARY_DIR}/components/${component_name}")
        foreach(embed_bin_path ${embed_bin_dir2})
            if((NOT embed_bin_path STREQUAL ".") AND (NOT embed_bin_path STREQUAL ".."))
                set(embed_bin_c_file_name "${embed_bin_c_file_name}_${embed_bin_path}")
                set(embed_bin_c_file_path "${embed_bin_c_file_path}/${embed_bin_path}")
            endif()
        endforeach()
        set(embed_bin_c_file_name "${embed_bin_c_file_name}_${embed_bin_name}")
        string(REPLACE "." "_" embed_bin_c_file_name ${embed_bin_c_file_name})
        set(embed_bin_c_file_name "${embed_bin_c_file_name}.c")
        #generate embedded binary file to c file
        bin2c_file(${embed_bin_file_name} ${embed_bin_c_file_path} ${embed_bin_c_file_name} 0)
        list(APPEND ADD_SRCS "${embed_bin_c_file_path}/${embed_bin_c_file_name}")
    endforeach()

    #add embedded text files
    foreach(embed_text_file ${ADD_EMBEDDED_TEXTFILES})
        get_filename_component(embed_text_name ${embed_text_file} NAME)
        get_filename_component(embed_text_dir ${embed_text_file} DIRECTORY)
        get_filename_component(embed_text_file_name ${embed_text_file} ABSOLUTE)
        string(REPLACE "/" ";" embed_text_dir2 ${embed_text_dir})
        set(embed_text_c_file_name "__binary_${component_name}")
        set(embed_text_c_file_path "${PROJECT_BINARY_DIR}/components/${component_name}")
        foreach(embed_text_path ${embed_text_dir2})
            if((NOT embed_text_path STREQUAL ".") AND (NOT embed_text_path STREQUAL ".."))
                set(embed_text_c_file_name "${embed_text_c_file_name}_${embed_text_path}")
                set(embed_text_c_file_path "${embed_text_c_file_path}/${embed_text_path}")
            endif()
        endforeach()
        set(embed_text_c_file_name "${embed_text_c_file_name}_${embed_text_name}")
        string(REPLACE "." "_" embed_text_c_file_name ${embed_text_c_file_name})
        set(embed_text_c_file_name "${embed_text_c_file_name}.c")
        #generate embedded text file to c file
        bin2c_file(${embed_text_file_name} ${embed_text_c_file_path} ${embed_text_c_file_name} 1)
        list(APPEND ADD_SRCS "${embed_text_c_file_path}/${embed_text_c_file_name}")
    endforeach()

    #add device table config c files
    if(CONFIG_DT_USE_C_STYLE_CONF AND ${component_name} STREQUAL "main")
        if(ADD_DT_C_FILES)
            list(APPEND ADD_SRCS ${ADD_DT_C_FILES})
        else()
            message(STATUS "ADD_DT_C_FILES not set")
            list(APPEND ADD_SRCS ${SDK_PATH}/components/wm_dt/config/${chip_type}/wm_dt_hw.c)
        endif()
    endif()

    # add custom files
    list(LENGTH ADD_CUSTOM_FILES num_elements)
    if(num_elements GREATER 0)
        set(current_group_name "")
        set(group_name_list "")
        set(files_list "")

        math(EXPR num_elements "${num_elements} - 1")
        foreach(index RANGE 0 ${num_elements})
            list(GET ADD_CUSTOM_FILES ${index} item)

            string(FIND "${item}" " " is_group_name)
            if(is_group_name EQUAL -1)
                list(LENGTH files_list length)
                if(${length} GREATER 0)
                    set(${current_group_name}_files_list ${files_list} CACHE INTERNAL "")
                    unset(files_list)
                endif()

                set(current_group_name "${item}")
                list(APPEND group_name_list ${current_group_name})
            else()
                string(REPLACE " " ";" file_info_parts ${item})
                list(GET file_info_parts 0 FILE_PATH)
                list(GET file_info_parts 1 OFFSET)
                list(GET file_info_parts 2 SIZE)
                get_filename_component(FILE_ABS_PATH ${FILE_PATH} ABSOLUTE)
                list(APPEND files_list "${FILE_ABS_PATH}" "${OFFSET}" "${SIZE}")
            endif()
        endforeach()
        set(partition_name_list ${group_name_list} CACHE INTERNAL "")
        list(LENGTH files_list length)
        if(${length} GREATER 0)
            set(${current_group_name}_files_list ${files_list} CACHE INTERNAL "")
            unset(files_list)
        endif()
    endif()

    # add fatfs files
    if(ADD_FATFS_FILES)
        # Create a cache variable to store fatfs files list
        set(fatfs_files_list ${fatfs_files})
        foreach(fatfs_file ${ADD_FATFS_FILES})
            get_filename_component(fatfs_file_abs ${fatfs_file} ABSOLUTE BASE_DIR ${component_dir})
            if(NOT EXISTS ${fatfs_file_abs})
                message(FATAL_ERROR "FATFS file not found: ${fatfs_file}")
            endif()
            list(APPEND fatfs_files_list ${fatfs_file_abs})
        endforeach()
        list(REMOVE_DUPLICATES fatfs_files_list)
        set(fatfs_files ${fatfs_files_list} CACHE INTERNAL "List of FATFS files")
    endif()

    set(cur_component_libs "")
    set(cur_component_incs "")

    # add src to lib
    if(ADD_SRCS)
        add_library(${component_name} STATIC ${ADD_SRCS})
        set(include_type PUBLIC)
    else()
        add_library(${component_name} INTERFACE)
        set(include_type INTERFACE)
    endif()

    # add include
    foreach(include_dir ${ADD_INCLUDE})
        get_filename_component(abs_dir ${include_dir} ABSOLUTE BASE_DIR ${component_dir})
        if(NOT IS_DIRECTORY ${abs_dir})
            message(FATAL_ERROR "${CMAKE_CURRENT_LIST_FILE}: ${include_dir} not found!")
        endif()
        list(APPEND cur_component_incs ${abs_dir})
    endforeach()

    # add private include
    foreach(include_dir ${ADD_PRIVATE_INCLUDE})
        if(${include_type} STREQUAL INTERFACE)
            message(FATAL_ERROR "${CMAKE_CURRENT_LIST_FILE}: ADD_PRIVATE_INCLUDE set but no source fileÔºÅ")
        endif()
        get_filename_component(abs_dir ${include_dir} ABSOLUTE BASE_DIR ${component_dir})
        if(NOT IS_DIRECTORY ${abs_dir})
            message(FATAL_ERROR "${CMAKE_CURRENT_LIST_FILE}: ${include_dir} not found!")
        endif()
        target_include_directories(${component_name} PRIVATE ${abs_dir})
    endforeach()

    # add global config include
    if(${include_type} STREQUAL INTERFACE)
        target_include_directories(${component_name} INTERFACE ${wmsdk_config_dir})
    else()
        target_include_directories(${component_name} PUBLIC ${wmsdk_config_dir})
    endif()

    # add definitions public
    foreach(difinition ${ADD_DEFINITIONS})
        target_compile_options(${component_name} PRIVATE ${difinition})
    endforeach()

    # add lib search path
    if(ADD_LINK_SEARCH_PATH)
        foreach(path ${ADD_LINK_SEARCH_PATH})
            if(NOT EXISTS "${path}")
                prepend(lib_full "${component_dir}/" ${path})
                if(NOT EXISTS "${lib_full}")
                    message(FATAL_ERROR "Can not find ${path} or ${lib_full}")
                endif()
                set(path ${lib_full})
            endif()
            get_filename_component(abs_dir ${path} ABSOLUTE)
            if(EXISTS "${abs_dir}")
                set(link_search_path ${g_link_search_path})
                list(APPEND link_search_path "${abs_dir}")
                list(REMOVE_DUPLICATES link_search_path)
                set(g_link_search_path ${link_search_path}  CACHE INTERNAL "g_link_search_path")
            endif()
        endforeach()
    endif()

    # add static lib
    if(ADD_STATIC_LIB)
        foreach(lib ${ADD_STATIC_LIB})
            if(NOT EXISTS "${lib}")
                prepend(lib_full "${component_dir}/" ${lib})
                if(NOT EXISTS "${lib_full}")
                    message(FATAL_ERROR "Can not find ${lib} or ${lib_full}")
                endif()
                set(lib ${lib_full})
            endif()

            list(APPEND cur_component_libs ${lib})

        endforeach()
    endif()

    # remove duplicate item
    list(REMOVE_ITEM all_component_libs ${component_name})
    # add new item
    list(APPEND cur_component_libs ${component_name})
    list(APPEND cur_component_libs ${all_component_libs})
    set(all_component_libs ${cur_component_libs} CACHE INTERNAL "")

    list(REMOVE_ITEM all_component_incs ${cur_component_incs})
    list(APPEND cur_component_incs ${all_component_incs})
    set(all_component_incs ${cur_component_incs} CACHE INTERNAL "")
    foreach(cur_component_incs ${all_component_incs})
        target_include_directories(${component_name} ${include_type} ${cur_component_incs})
    endforeach()
endfunction()

function(is_path_component ret param_path)
    set(res 1)
    get_filename_component(abs_dir ${param_path} ABSOLUTE)

    if(NOT IS_DIRECTORY "${abs_dir}")
        set(res 0)
    endif()

    get_filename_component(base_dir ${abs_dir} NAME)
    string(SUBSTRING "${base_dir}" 0 1 first_char)

    if(NOT first_char STREQUAL ".")
        if(NOT EXISTS "${abs_dir}/CMakeLists.txt")
            set(res 0)
        endif()
    else()
        set(res 0)
    endif()

    set(${ret} ${res} PARENT_SCOPE)
endfunction()
