# find components in components folder, register components
file(GLOB component_dirs ${SDK_PATH}/components/*)
foreach(component_dir ${component_dirs})
    is_path_component(is_component ${component_dir})
    if(is_component)
        get_filename_component(base_dir ${component_dir} NAME)
        if(USE_CMAKE_BUILD_DEBUG)
            message(STATUS "Found component: ${base_dir}, path: ${component_dir}")
        endif()
        list(APPEND components_dirs ${component_dir})
        if(EXISTS ${component_dir}/Kconfig)
            if(USE_CMAKE_BUILD_DEBUG)
                message(STATUS "Found Kconfig in the ${base_dir}")
            endif()
            #list(APPEND components_kconfig_files ${component_dir}/Kconfig)
        endif()
    endif()
endforeach()

# find components in project folder
file(GLOB project_component_dirs ${PROJECT_SOURCE_DIR}/*)
foreach(component_dir ${project_component_dirs})
    is_path_component(is_component ${component_dir})
    if(is_component)
        get_filename_component(base_dir ${component_dir} NAME)
        if(USE_CMAKE_BUILD_DEBUG)
            message(STATUS "Found component: ${base_dir}, path: ${component_dir}")
        endif()
        list(APPEND components_dirs ${component_dir})
        if(${base_dir} STREQUAL "main")
            set(main_component 1)
        endif()
        if(EXISTS ${component_dir}/Kconfig)
            if(USE_CMAKE_BUILD_DEBUG)
                message(STATUS "Found Kconfig in the ${base_dir}")
            endif()
            #list(APPEND components_kconfig_files ${component_dir}/Kconfig)
        endif()
    endif()
endforeach()

if(NOT main_component)
    message(FATAL_ERROR "=================\nCan not find main component(folder) in project folder!!\n=================")
endif()

set(all_component_defs "" CACHE INTERNAL "")
set(all_component_libs "" CACHE INTERNAL "")
set(all_component_incs "" CACHE INTERNAL "")
set(add_use_components "" CACHE INTERNAL "")
set(reg_use_components "" CACHE INTERNAL "")

# foreach components add includes
foreach(component_dir ${components_dirs})
    get_filename_component(_component_name ${component_dir} NAME)
    file(STRINGS "${component_dir}/CMakeLists.txt" _read_var)
    set(_new_component 0)
    while(1)
        set(include_name "ADD_INCLUDE")
        set(include_read_len 4096)
        string(FIND "${_read_var}" ${include_name} include_start_pos)
        if(include_start_pos GREATER -1)
            if(NOT _new_component)
                #check kconfig is enable
                if(EXISTS "${wmsdk_config_dir}/wmsdk.config")
                    string(SUBSTRING "${_read_var}" 0 ${include_start_pos} _head_var)
                    string(REGEX MATCH "CONFIG_[a-zA-Z0-9_]*" _match_str ${_head_var})
                    if(_match_str)
                        file(STRINGS "${wmsdk_config_dir}/wmsdk.config" _kconfig_var REGEX "^${_match_str}")
                        if(_kconfig_var)
                            list(APPEND add_use_components ${_component_name})
                        else()
                            break()
                        endif()
                    else()
                        string(FIND "${_head_var}" "#" _has_comment_)
                        if("${_has_comment_}" STREQUAL "0")
                            break()
                        else()
                            list(APPEND add_use_components ${_component_name})
                        endif()
                    endif()
                endif()
                set(_new_component 1)
            endif()

            #parse include path
            string(LENGTH ${include_name} include_name_len)
            math(EXPR _include_pos "${include_start_pos} + ${include_name_len}")
            string(SUBSTRING "${_read_var}" ${_include_pos} ${include_read_len} include_start)
            string(FIND "${include_start}" ")" include_end_pos)
            if(include_end_pos GREATER -1)
                set(include_end_pos2 "${include_end_pos}")
                string(SUBSTRING "${include_start}" 0 ${include_end_pos} include_var)
                while(1)
                    string(FIND "${include_var}" "\"" include_start_pos)
                    if(include_start_pos GREATER -1)
                        string(FIND "${include_var}" ";" include_end_pos)
                        if(include_end_pos GREATER -1)
                            math(EXPR include_start_pos "${include_start_pos} + 1")
                            math(EXPR include_end_pos "${include_end_pos} - 3")
                            string(SUBSTRING "${include_var}" ${include_start_pos} ${include_end_pos} _inc_var)
                            set(_inc_var "${component_dir}/${_inc_var}")
                            #remove space " ;
                            string(REPLACE ";" "" _inc_var "${_inc_var}")
                            string(REPLACE "\"" "" _inc_var "${_inc_var}")
                            string(STRIP ${_inc_var} _inc_var)
                            #check is exist ${var}, todo regex replace
                            string(FIND ${_inc_var} "\$\{chip_type\}" _exist_var)
                            if(_exist_var GREATER -1)
                                string(REPLACE "\$\{chip_type\}" "${chip_type}" _inc_var "${_inc_var}")
                            endif()
                            string(FIND ${_inc_var} "\$\{CONFIG_CHIP_FAMILY_NAME\}" _exist_var)
                            if(_exist_var GREATER -1)
                                string(REPLACE "\$\{CONFIG_CHIP_FAMILY_NAME\}" "${CONFIG_CHIP_FAMILY_NAME}" _inc_var "${_inc_var}")
                            endif()
                            list(APPEND all_component_incs ${_inc_var})
                            #prepare next
                            math(EXPR include_end_pos "${include_end_pos} + 3 + 1")
                            string(SUBSTRING "${include_var}" ${include_end_pos} ${include_read_len} include_var)
                        else()
                            math(EXPR include_start_pos "${include_start_pos} + 1")
                            math(EXPR include_end_pos "${include_end_pos2} - 2")
                            string(SUBSTRING "${include_var}" ${include_start_pos} ${include_end_pos} _inc_var)
                            set(_inc_var "${component_dir}/${_inc_var}")
                            #remove space " ;
                            string(REPLACE ";" "" _inc_var "${_inc_var}")
                            string(REPLACE "\"" "" _inc_var "${_inc_var}")
                            string(STRIP ${_inc_var} _inc_var)
                            #check is exist ${var}, todo regex replace
                            string(FIND ${_inc_var} "\$\{chip_type\}" _exist_var)
                            if(_exist_var GREATER -1)
                                string(REPLACE "\$\{chip_type\}" "${chip_type}" _inc_var "${_inc_var}")
                            endif()
                            string(FIND ${_inc_var} "\$\{CONFIG_CHIP_FAMILY_NAME\}" _exist_var)
                            if(_exist_var GREATER -1)
                                string(REPLACE "\$\{CONFIG_CHIP_FAMILY_NAME\}" "${CONFIG_CHIP_FAMILY_NAME}" _inc_var "${_inc_var}")
                            endif()
                            list(APPEND all_component_incs ${_inc_var})
                            break()
                        endif()
                    else()
                        break()
                    endif()
                endwhile()
                #prepare next
                if(include_end_pos GREATER -1)
                    string(SUBSTRING "${include_start}" ${include_end_pos} ${include_read_len} _read_var)
                else()
                    break()
                endif()
            else()
                break()
            endif()
        else()
            if(USE_CMAKE_BUILD_DEBUG)
                if(NOT _new_component)
                    if(EXISTS "${component_dir}/CMakeLists.txt")
                        #check kconfig is enable
                        if(EXISTS "${wmsdk_config_dir}/wmsdk.config")
                            string(SUBSTRING "${_read_var}" 0 ${include_read_len} _head_var)
                            string(REGEX MATCH "CONFIG_[a-zA-Z0-9_]*" _match_str ${_head_var})
                            if(_match_str)
                                file(STRINGS "${wmsdk_config_dir}/wmsdk.config" _kconfig_var REGEX "^${_match_str}")
                                if(_kconfig_var)
                                    list(APPEND add_use_components ${_component_name})
                                else()
                                    break()
                                endif()
                            else()
                                list(APPEND add_use_components ${_component_name})
                            endif()
                        endif()
                    endif()
                    set(_new_component 1)
                endif()
            endif()
            break()
        endif()
    endwhile()
endforeach()

# foreach components add global defines
foreach(component_dir ${components_dirs})
    get_filename_component(_component_name ${component_dir} NAME)
    file(STRINGS "${component_dir}/CMakeLists.txt" _read_var)
    set(_new_component 0)
    while(1)
        set(defs_name "ADD_GDEFINITIONS")
        set(defs_read_len 4096)
        string(FIND "${_read_var}" ${defs_name} defs_start_pos)
        if(defs_start_pos GREATER -1)
            if(NOT _new_component)
                #check kconfig is enable
                if(EXISTS "${wmsdk_config_dir}/wmsdk.config")
                    string(SUBSTRING "${_read_var}" 0 ${defs_start_pos} _head_var)
                    string(REGEX MATCH "CONFIG_[a-zA-Z0-9_]*" _match_str ${_head_var})
                    if(_match_str)
                        file(STRINGS "${wmsdk_config_dir}/wmsdk.config" _kconfig_var REGEX "^${_match_str}")
                        if(NOT _kconfig_var)
                            break()
                        endif()
                    else()
                        string(FIND "${_head_var}" "#" _has_comment_)
                        if("${_has_comment_}" STREQUAL "0")
                            break()
                        endif()
                    endif()
                endif()
                set(_new_component 1)
            else()
                break()
            endif()

            #parse defines
            string(LENGTH ${defs_name} defs_name_len)
            math(EXPR _defs_pos "${defs_start_pos} + ${defs_name_len}")
            string(SUBSTRING "${_read_var}" ${_defs_pos} ${defs_read_len} defs_start)
            string(FIND "${defs_start}" ")" defs_end_pos)
            if(defs_end_pos GREATER -1)
                set(defs_end_pos2 "${defs_end_pos}")
                string(SUBSTRING "${defs_start}" 0 ${defs_end_pos} defs_var)
                while(1)
                    string(FIND "${defs_var}" "-D" defs_start_pos)
                    if(defs_start_pos GREATER -1)
                        string(FIND "${defs_var}" ";" defs_end_pos)
                        if(defs_end_pos GREATER -1)
                            math(EXPR defs_end_pos "${defs_end_pos} - 1")
                            string(SUBSTRING "${defs_var}" ${defs_start_pos} ${defs_end_pos} _def_var)
                            #remove space " ;
                            string(REPLACE ";" "" _def_var "${_def_var}")
                            string(REPLACE "\"" "\\\"" _def_var "${_def_var}")
                            string(STRIP ${_def_var} _def_var)
                            list(APPEND all_component_defs ${_def_var})
                            #prepare next
                            math(EXPR defs_end_pos "${defs_end_pos} + 1 + 1")
                            string(SUBSTRING "${defs_var}" ${defs_end_pos} ${defs_read_len} defs_var)
                        else()
                            math(EXPR defs_end_pos "${defs_end_pos2} - 1")
                            string(SUBSTRING "${defs_var}" ${defs_start_pos} ${defs_end_pos} _def_var)
                            #remove space " ;
                            string(REPLACE ";" "" _def_var "${_def_var}")
                            string(STRIP ${_def_var} _def_var)
                            list(APPEND all_component_defs ${_def_var})
                            break()
                        endif()
                    else()
                        break()
                    endif()
                endwhile()
                #prepare next
                if(defs_end_pos GREATER -1)
                    string(SUBSTRING "${defs_start}" ${defs_end_pos} ${defs_read_len} _read_var)
                else()
                    break()
                endif()
            else()
                break()
            endif()
        else()
            break()
        endif()
    endwhile()
endforeach()

# add global definitions public
foreach(cur_definition ${all_component_defs})
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${cur_definition}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${cur_definition}")
    set(CMAKE_ASM_FLAGS "${CMAKE_ASM_FLAGS} ${cur_definition}")
endforeach()

# add project/build/dt/.h or device table config h files to include
if(CONFIG_DT_USE_C_STYLE_CONF)
    unset(ADD_DT_H_FILES)
    file(STRINGS ${PROJECT_PATH}/main/CMakeLists.txt file_lines REGEX "^set\\(ADD_DT_H_FILES")
    if(file_lines)
        string(REGEX MATCH "\"([^\"]*)\"" match_result "${file_lines}")
        if(DEFINED CMAKE_MATCH_1)
            set(ADD_DT_H_FILES "${PROJECT_PATH}/main/${CMAKE_MATCH_1}")
        endif()
    endif()
    if(ADD_DT_H_FILES)
        list(APPEND all_component_incs ${ADD_DT_H_FILES})
    else()
        message(STATUS "ADD_DT_H_FILES not set")
        list(APPEND all_component_incs ${SDK_PATH}/components/wm_dt/config)
    endif()
else()
    list(APPEND all_component_incs ${wmsdk_dt_dir})
endif()

# foreach components CMakeLists.txt
foreach(component_dir ${components_dirs})
    get_filename_component(base_dir ${component_dir} NAME)
    add_subdirectory(${component_dir} components/${base_dir})
endforeach()

if(USE_CMAKE_BUILD_DEBUG)
    list(SORT add_use_components)
    message(STATUS "add inc components: ${add_use_components}")
    list(SORT reg_use_components)
    message(STATUS "reg use components: ${reg_use_components}")
endif()
